@page "/"
@inject ILogger<Home> logger
<style>
    .fullScreen {
        height: 97vh;
        width: 98vw;
        background-color: aliceblue;
        margin: 0;
        position: relative;
        padding: 10px;
    }
</style>

<div class="fullScreen" tabindex="0" @onkeydown=keyPress>
    <h3>Tug of War</h3>
    @if (yourName is null)
    {
        <input @bind=yourName placeholder="Enter your name" />
    }
    else
    {
        <img src="@imageUrl" style=@ImageStyle />

        <button @onclick="MoveUp">Up</button>
        <button @onclick="MoveDown">Down</button>
        <button @onclick="MoveLeft">Left</button>
        <button @onclick="MoveRight">Right</button>
    }
</div>

@code {
    //These non-static variables are unique per instance:
    string? yourName = null;
    string ImageStyle => $"position: absolute; top: {y}px; left: {x}px; width: 75px;";
    string imageUrl = "gamePiece.jpg"; // Replace with your image URL

    //These static variables are shared across all instances:
    static int y = 200;
    static int x = 200;
    static event Action? LocationChanged;

    override protected void OnInitialized()
    {
        LocationChanged += () => InvokeAsync(StateHasChanged);
    }

    void move(int newX, int newY)
    {
        x = Math.Max(0, newX);
        y = Math.Max(0, newY);
        logger.LogInformation("{name}: ({x}, {y})", yourName, x, y);
        LocationChanged?.Invoke();
    }

    void MoveUp() => move(x, y-10);
    void MoveDown() => move(x, y+10);
    void MoveLeft() => move(x-10, y);
    void MoveRight() => move(x+10, y);

    void keyPress(KeyboardEventArgs e)
    {
        logger.LogInformation("{name}: Key {key} pressed", yourName, e.Key);
        switch (e.Key)
        {
            case "ArrowUp":
                MoveUp();
                break;
            case "ArrowDown":
                MoveDown();
                break;
            case "ArrowRight":
                MoveRight();
                break;
            case "ArrowLeft":
                MoveLeft();
                break;
        }
    }
}
